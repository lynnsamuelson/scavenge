{"remainingRequest":"c:\\development\\scavenge\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\development\\scavenge\\src\\Scavenge.vue?vue&type=script&lang=js&","dependencies":[{"path":"c:\\development\\scavenge\\src\\Scavenge.vue","mtime":1567951625946},{"path":"c:\\development\\scavenge\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\development\\scavenge\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"c:\\development\\scavenge\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"c:\\development\\scavenge\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\r\nimport ScavengeMain from './components/ScavengeMain.vue'\r\nimport Secondary from './components/Secondary.vue'\r\n\r\nimport secondary from '../public/hunts/encoreHunt.json'\r\nimport huntItems from '../public/hunts/encorePrimary.json'\r\nimport { fileURLToPath } from 'url';\r\n      \r\n\r\nexport default {\r\n  name: 'app',\r\n  components: {\r\n    ScavengeMain,\r\n    Secondary\r\n  },\r\n  data() {\r\n    //display 0 - show not complete\r\n      //display 1 - show complete\r\n      //display 2 - show all\r\n    return {items: huntItems, secondary:secondary, display: 0}\r\n  },\r\n  mounted:function(){\r\n    this.GetFirstItem(this.display);\r\n  },\r\n  computed: {\r\n    found: function(){\r\n      var displayFound = [];\r\n      for(var i = 0; i<this.items.length; i++){\r\n        if(this.items[i].got === true){\r\n          displayFound.push(this.items[i]);\r\n        } \r\n      }\r\n      return displayFound;\r\n    },\r\n    toFind: function(){\r\n      var displayNotFound = [];\r\n      for(var i = 0; i<this.items.length; i++){\r\n        if(this.items[i].got === false){\r\n          displayNotFound.push(this.items[i]);\r\n        } \r\n      }\r\n      return displayNotFound;\r\n    },\r\n    noClues: function(){\r\n      var noClues = [];\r\n      var item = {\r\n        \"id\": 5,\r\n        \"clue\": \"NEED CLUE \",\r\n        \"answer\": \"First TN Park\",\r\n        \"image\": \"/img/firstTNPark.jpg\",\r\n        \"desc\": \"This is the description of the First TN Park\",\r\n        \"directions\": \"Dicetions to the First TN Park\",\r\n        \"order\": 5,\r\n        \"display\": true,\r\n        \"got\": false\r\n      }\r\n      noClues.push(item);\r\n      return noClues;\r\n    }\r\n  },\r\n  methods: {\r\n    Next() {\r\n      let displays = [];\r\n      switch(this.display){\r\n        case 0:\r\n          //need to fix bug that if you find all the things it does not cycle and stays on last item\r\n          console.log(\"length\", this.toFind.length)\r\n          if(this.toFind.length > 0){\r\n            displays = this.toFind;\r\n          } else {\r\n            displays = this.noClues;\r\n          }\r\n          break;\r\n        case 1: \r\n          displays = this.found;\r\n          break;\r\n        default:\r\n          displays = this.items;\r\n          break;\r\n      }\r\n      let currentIndx = this.items.findIndex(el => el.display === true);\r\n      let displaysCurrentIndx = displays.findIndex(el => el.id == this.items[currentIndx].id);\r\n      let next;\r\n      if(displaysCurrentIndx === displays.length-1){\r\n        next = displays[0];\r\n      } else {\r\n        next = displays[displaysCurrentIndx+1];\r\n      } \r\n\r\n      let nextIndx = this.items.findIndex(el => el.id === next.id);\r\n      this.items[currentIndx].display = false;\r\n      this.items[nextIndx].display = true;\r\n\r\n      return nextIndx;\r\n    },\r\n    Previous(){\r\n      let displays = [];\r\n      switch(this.display){\r\n        case 0:\r\n          displays = this.toFind;\r\n          break;\r\n        case 1: \r\n          displays = this.found;\r\n          break;\r\n        default:\r\n          displays = this.items;\r\n          break;\r\n      }\r\n      let currentIndx = this.items.findIndex(el => el.display === true);\r\n\r\n      let displaysCurrentIndx = displays.findIndex(el => el.id == this.items[currentIndx].id);\r\n      let prev;\r\n      if(displaysCurrentIndx === 0){\r\n        prev = displays[displays.length-1];\r\n      } else {\r\n        prev = displays[displaysCurrentIndx-1];\r\n      } \r\n\r\n      let prevIndx = this.items.findIndex(el => el.id === prev.id);\r\n      this.items[currentIndx].display = false;\r\n      this.items[prevIndx].display = true;\r\n\r\n      return prevIndx;\r\n    },\r\n    ClearDisplay(){\r\n      for(var i = 0; i< this.items.length; i++){\r\n        this.items[i].display = false;\r\n      }\r\n    },\r\n    GetFirstItem(display){\r\n      this.display = display;\r\n      this.ClearDisplay();\r\n      switch(display){\r\n        case 0: \r\n          var item = this.items[0];\r\n          for(var i = 0; i < this.items.length; i++){\r\n            if(this.items[i].order < item.order && !this.items[i].got){\r\n              item = this.items[i];\r\n            }\r\n          }\r\n          item.display = true;\r\n          break;\r\n        case 1:\r\n          var item;\r\n          for(var i = 0; i < this.items.length; i++){\r\n            if(this.items[i].got){\r\n              if(item){\r\n                if(this.items[i].order < item.order){\r\n                  item = this.items[i];\r\n                }\r\n              }else {\r\n                item = this.items[i];\r\n              }\r\n            }\r\n          }\r\n          item.display = true;\r\n          break;\r\n        default :\r\n          this.items[0].display = true;\r\n          break;\r\n      }\r\n    },\r\n    AnotherClue(){\r\n      let currentClueIndx = secondary.findIndex(el => el.display === true);\r\n      let nextClue = secondary[currentClueIndx+1];\r\n      \r\n      secondary[currentClueIndx].display = false;\r\n      if(secondary[currentClueIndx+1]){\r\n        secondary[currentClueIndx+1].display = true;\r\n      } else {\r\n        secondary[0].display = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n",{"version":3,"sources":["Scavenge.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;AAyfile":"Scavenge.vue","sourceRoot":"src","sourcesContent":["<template>\r\n  <div id=\"app\">\r\n    <div class=\"nav control\">\r\n      <h2 class=\"title\">Encore Scavenger Hunt</h2>\r\n      <button v-on:click=\"GetFirstItem(1)\" id=\"foundBtn\" :class=\"{'displaying' : display == 1}\" class=\"left button\" >Found</button>\r\n      <button v-on:click=\"GetFirstItem(0)\" id=\"toFindBtn\" class=\"left button\" :class=\"{'displaying' : display == 0}\">To Find</button>\r\n      <button v-on:click=\"GetFirstItem(2)\" id=\"allBtn\" class=\"left button\" :class=\"{'displaying' : display == 2}\">All</button>\r\n    </div>\r\n    <div class=\"card topcard\">\r\n      <div class=\"nav\">\r\n        <button v-on:click=\"Previous()\" class=\"left button\">Previous</button>\r\n        <button v-on:click=\"Next()\" class=\"right button\">Next</button>\r\n      </div>\r\n      <ScavengeMain v-for=\"item in items\" :key=\"item.id\" :item=\"item\" :data=\"2\"/>\r\n    </div>\r\n    <div class=\"card bottomCard\">\r\n      <div class=\"h5Wrapper\">\r\n        <h5>Other Things to Find</h5>\r\n      </div>\r\n      <Secondary v-for=\"item in secondary\" :key=\"item.id\" :item=\"item\" />\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nimport ScavengeMain from './components/ScavengeMain.vue'\r\nimport Secondary from './components/Secondary.vue'\r\n\r\nimport secondary from '../public/hunts/encoreHunt.json'\r\nimport huntItems from '../public/hunts/encorePrimary.json'\r\nimport { fileURLToPath } from 'url';\r\n      \r\n\r\nexport default {\r\n  name: 'app',\r\n  components: {\r\n    ScavengeMain,\r\n    Secondary\r\n  },\r\n  data() {\r\n    //display 0 - show not complete\r\n      //display 1 - show complete\r\n      //display 2 - show all\r\n    return {items: huntItems, secondary:secondary, display: 0}\r\n  },\r\n  mounted:function(){\r\n    this.GetFirstItem(this.display);\r\n  },\r\n  computed: {\r\n    found: function(){\r\n      var displayFound = [];\r\n      for(var i = 0; i<this.items.length; i++){\r\n        if(this.items[i].got === true){\r\n          displayFound.push(this.items[i]);\r\n        } \r\n      }\r\n      return displayFound;\r\n    },\r\n    toFind: function(){\r\n      var displayNotFound = [];\r\n      for(var i = 0; i<this.items.length; i++){\r\n        if(this.items[i].got === false){\r\n          displayNotFound.push(this.items[i]);\r\n        } \r\n      }\r\n      return displayNotFound;\r\n    },\r\n    noClues: function(){\r\n      var noClues = [];\r\n      var item = {\r\n        \"id\": 5,\r\n        \"clue\": \"NEED CLUE \",\r\n        \"answer\": \"First TN Park\",\r\n        \"image\": \"/img/firstTNPark.jpg\",\r\n        \"desc\": \"This is the description of the First TN Park\",\r\n        \"directions\": \"Dicetions to the First TN Park\",\r\n        \"order\": 5,\r\n        \"display\": true,\r\n        \"got\": false\r\n      }\r\n      noClues.push(item);\r\n      return noClues;\r\n    }\r\n  },\r\n  methods: {\r\n    Next() {\r\n      let displays = [];\r\n      switch(this.display){\r\n        case 0:\r\n          //need to fix bug that if you find all the things it does not cycle and stays on last item\r\n          console.log(\"length\", this.toFind.length)\r\n          if(this.toFind.length > 0){\r\n            displays = this.toFind;\r\n          } else {\r\n            displays = this.noClues;\r\n          }\r\n          break;\r\n        case 1: \r\n          displays = this.found;\r\n          break;\r\n        default:\r\n          displays = this.items;\r\n          break;\r\n      }\r\n      let currentIndx = this.items.findIndex(el => el.display === true);\r\n      let displaysCurrentIndx = displays.findIndex(el => el.id == this.items[currentIndx].id);\r\n      let next;\r\n      if(displaysCurrentIndx === displays.length-1){\r\n        next = displays[0];\r\n      } else {\r\n        next = displays[displaysCurrentIndx+1];\r\n      } \r\n\r\n      let nextIndx = this.items.findIndex(el => el.id === next.id);\r\n      this.items[currentIndx].display = false;\r\n      this.items[nextIndx].display = true;\r\n\r\n      return nextIndx;\r\n    },\r\n    Previous(){\r\n      let displays = [];\r\n      switch(this.display){\r\n        case 0:\r\n          displays = this.toFind;\r\n          break;\r\n        case 1: \r\n          displays = this.found;\r\n          break;\r\n        default:\r\n          displays = this.items;\r\n          break;\r\n      }\r\n      let currentIndx = this.items.findIndex(el => el.display === true);\r\n\r\n      let displaysCurrentIndx = displays.findIndex(el => el.id == this.items[currentIndx].id);\r\n      let prev;\r\n      if(displaysCurrentIndx === 0){\r\n        prev = displays[displays.length-1];\r\n      } else {\r\n        prev = displays[displaysCurrentIndx-1];\r\n      } \r\n\r\n      let prevIndx = this.items.findIndex(el => el.id === prev.id);\r\n      this.items[currentIndx].display = false;\r\n      this.items[prevIndx].display = true;\r\n\r\n      return prevIndx;\r\n    },\r\n    ClearDisplay(){\r\n      for(var i = 0; i< this.items.length; i++){\r\n        this.items[i].display = false;\r\n      }\r\n    },\r\n    GetFirstItem(display){\r\n      this.display = display;\r\n      this.ClearDisplay();\r\n      switch(display){\r\n        case 0: \r\n          var item = this.items[0];\r\n          for(var i = 0; i < this.items.length; i++){\r\n            if(this.items[i].order < item.order && !this.items[i].got){\r\n              item = this.items[i];\r\n            }\r\n          }\r\n          item.display = true;\r\n          break;\r\n        case 1:\r\n          var item;\r\n          for(var i = 0; i < this.items.length; i++){\r\n            if(this.items[i].got){\r\n              if(item){\r\n                if(this.items[i].order < item.order){\r\n                  item = this.items[i];\r\n                }\r\n              }else {\r\n                item = this.items[i];\r\n              }\r\n            }\r\n          }\r\n          item.display = true;\r\n          break;\r\n        default :\r\n          this.items[0].display = true;\r\n          break;\r\n      }\r\n    },\r\n    AnotherClue(){\r\n      let currentClueIndx = secondary.findIndex(el => el.display === true);\r\n      let nextClue = secondary[currentClueIndx+1];\r\n      \r\n      secondary[currentClueIndx].display = false;\r\n      if(secondary[currentClueIndx+1]){\r\n        secondary[currentClueIndx+1].display = true;\r\n      } else {\r\n        secondary[0].display = true;\r\n      }\r\n    }\r\n  }\r\n}\r\n</script>\r\n\r\n<style>\r\n#app {\r\n  width: 100%;\r\n  content: \"\";\r\n  display: table;\r\n  clear: both;\r\n  font-family: 'Avenir', Helvetica, Arial, sans-serif;\r\n  -webkit-font-smoothing: antialiased;\r\n  -moz-osx-font-smoothing: grayscale;\r\n  text-align: center;\r\n  color: #ffffff;\r\n  margin-top: 20px;\r\n}\r\n\r\n* {\r\n  box-sizing: border-box;\r\n}\r\n\r\nbody {\r\n  background-color: #07050c;\r\n  color:#CACBCA;\r\n}\r\n\r\nh5 {\r\n    margin: 0;\r\n    color: #CACBCA;\r\n    margin: 0;\r\n    position: absolute;\r\n    top: 50%;\r\n    left: 50%;\r\n    margin-right: -50%;\r\n    transform: translate(-50%, -50%)\r\n  }\r\n\r\n.title {\r\n  margin: -4px 0 10px 0;\r\n}\r\n\r\n.h5Wrapper {\r\n    background-color: #46B019;\r\n    min-height: 35px;\r\n    width: 100%;\r\n    position: relative;\r\n    margin: 0 0 10px 0;\r\n}\r\n\r\n.card{\r\n  margin: 1% 15%;\r\n  height: 520px;\r\n  float: left;\r\n  width: 70%;\r\n  padding: 5%;\r\n}\r\n\r\n.topcard {\r\n  background-color: #279ECC;\r\n}\r\n\r\n.list {\r\n  float: right;\r\n  padding: 10px;\r\n  border: 1px solid #fff;\r\n  text-align: center;\r\n}\r\n\r\n.found {\r\n  float: right;\r\n  width: 30%;\r\n  height: 500px;\r\n}\r\n\r\n.bottomCard {\r\n  background-color: #90D277;\r\n  height: 280px;\r\n}\r\n\r\n.nav {\r\n  margin: 0 0 35px 0;\r\n}\r\n\r\n.control{\r\n background-color: #A34F3366;\r\n  margin: 1% 15%;\r\n  float: left;\r\n  width: 70%;\r\n  padding: 5%;\r\n}\r\n\r\n.image {\r\n  height: auto;\r\n  width:85%;\r\n  margin: 0 5%;\r\n}\r\n\r\n.button {\r\n  background-color: #00336685;\r\n  border: none;\r\n  min-height: 25px;\r\n  color: #CACBCA;\r\n  min-width: 48%;\r\n}\r\n\r\n\r\n\r\n.right {\r\n  float:right;\r\n}\r\n.control .button {\r\n  background-color: #00336633;\r\n  min-height: 50px;\r\n  border-radius: 50%;\r\n  min-width: 50px;\r\n  margin: 0 20px; \r\n}\r\n#app .displaying {\r\n  background-color: #A34F33;\r\n}\r\n\r\n@media (max-width: 450px) { \r\n  .control{\r\n    background-color: #A34F3366;\r\n    margin: 5% 5%;\r\n    float: left;\r\n    width: 90%;\r\n    padding: 5%;\r\n  }\r\n\r\n  .left {\r\n    float: left;\r\n  }\r\n\r\n  .card{\r\n    margin: 5% 5%;\r\n    width: 90%;\r\n    height: 280px;\r\n  }\r\n\r\n}\r\n\r\n</style>\r\n"]}]}